/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router';

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as LayoutImport } from './routes/_layout';
import { Route as AuthSignupImport } from './routes/auth/signup';
import { Route as AuthResetPasswordImport } from './routes/auth/reset-password';
import { Route as AuthLoginImport } from './routes/auth/login';
import { Route as AuthForgotPasswordImport } from './routes/auth/forgot-password';
import { Route as LayoutSettingsImport } from './routes/_layout/settings';
import { Route as LayoutProfileImport } from './routes/_layout/profile';
import { Route as LayoutHomeImport } from './routes/_layout/home';
import { Route as LayoutExplorerImport } from './routes/_layout/explorer';

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')();

// Create/Update Routes

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any);

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route));

const AuthSignupRoute = AuthSignupImport.update({
  path: '/auth/signup',
  getParentRoute: () => rootRoute,
} as any);

const AuthResetPasswordRoute = AuthResetPasswordImport.update({
  path: '/auth/reset-password',
  getParentRoute: () => rootRoute,
} as any);

const AuthLoginRoute = AuthLoginImport.update({
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any);

const AuthForgotPasswordRoute = AuthForgotPasswordImport.update({
  path: '/auth/forgot-password',
  getParentRoute: () => rootRoute,
} as any);

const LayoutSettingsRoute = LayoutSettingsImport.update({
  path: '/settings',
  getParentRoute: () => LayoutRoute,
} as any);

const LayoutProfileRoute = LayoutProfileImport.update({
  path: '/profile',
  getParentRoute: () => LayoutRoute,
} as any);

const LayoutHomeRoute = LayoutHomeImport.update({
  path: '/home',
  getParentRoute: () => LayoutRoute,
} as any);

const LayoutExplorerRoute = LayoutExplorerImport.update({
  path: '/explorer',
  getParentRoute: () => LayoutRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/_layout': {
      id: '/_layout';
      path: '';
      fullPath: '';
      preLoaderRoute: typeof LayoutImport;
      parentRoute: typeof rootRoute;
    };
    '/_layout/explorer': {
      id: '/_layout/explorer';
      path: '/explorer';
      fullPath: '/explorer';
      preLoaderRoute: typeof LayoutExplorerImport;
      parentRoute: typeof LayoutImport;
    };
    '/_layout/home': {
      id: '/_layout/home';
      path: '/home';
      fullPath: '/home';
      preLoaderRoute: typeof LayoutHomeImport;
      parentRoute: typeof LayoutImport;
    };
    '/_layout/profile': {
      id: '/_layout/profile';
      path: '/profile';
      fullPath: '/profile';
      preLoaderRoute: typeof LayoutProfileImport;
      parentRoute: typeof LayoutImport;
    };
    '/_layout/settings': {
      id: '/_layout/settings';
      path: '/settings';
      fullPath: '/settings';
      preLoaderRoute: typeof LayoutSettingsImport;
      parentRoute: typeof LayoutImport;
    };
    '/auth/forgot-password': {
      id: '/auth/forgot-password';
      path: '/auth/forgot-password';
      fullPath: '/auth/forgot-password';
      preLoaderRoute: typeof AuthForgotPasswordImport;
      parentRoute: typeof rootRoute;
    };
    '/auth/login': {
      id: '/auth/login';
      path: '/auth/login';
      fullPath: '/auth/login';
      preLoaderRoute: typeof AuthLoginImport;
      parentRoute: typeof rootRoute;
    };
    '/auth/reset-password': {
      id: '/auth/reset-password';
      path: '/auth/reset-password';
      fullPath: '/auth/reset-password';
      preLoaderRoute: typeof AuthResetPasswordImport;
      parentRoute: typeof rootRoute;
    };
    '/auth/signup': {
      id: '/auth/signup';
      path: '/auth/signup';
      fullPath: '/auth/signup';
      preLoaderRoute: typeof AuthSignupImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

interface LayoutRouteChildren {
  LayoutExplorerRoute: typeof LayoutExplorerRoute;
  LayoutHomeRoute: typeof LayoutHomeRoute;
  LayoutProfileRoute: typeof LayoutProfileRoute;
  LayoutSettingsRoute: typeof LayoutSettingsRoute;
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutExplorerRoute: LayoutExplorerRoute,
  LayoutHomeRoute: LayoutHomeRoute,
  LayoutProfileRoute: LayoutProfileRoute,
  LayoutSettingsRoute: LayoutSettingsRoute,
};

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren);

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute;
  '': typeof LayoutRouteWithChildren;
  '/explorer': typeof LayoutExplorerRoute;
  '/home': typeof LayoutHomeRoute;
  '/profile': typeof LayoutProfileRoute;
  '/settings': typeof LayoutSettingsRoute;
  '/auth/forgot-password': typeof AuthForgotPasswordRoute;
  '/auth/login': typeof AuthLoginRoute;
  '/auth/reset-password': typeof AuthResetPasswordRoute;
  '/auth/signup': typeof AuthSignupRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute;
  '': typeof LayoutRouteWithChildren;
  '/explorer': typeof LayoutExplorerRoute;
  '/home': typeof LayoutHomeRoute;
  '/profile': typeof LayoutProfileRoute;
  '/settings': typeof LayoutSettingsRoute;
  '/auth/forgot-password': typeof AuthForgotPasswordRoute;
  '/auth/login': typeof AuthLoginRoute;
  '/auth/reset-password': typeof AuthResetPasswordRoute;
  '/auth/signup': typeof AuthSignupRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexLazyRoute;
  '/_layout': typeof LayoutRouteWithChildren;
  '/_layout/explorer': typeof LayoutExplorerRoute;
  '/_layout/home': typeof LayoutHomeRoute;
  '/_layout/profile': typeof LayoutProfileRoute;
  '/_layout/settings': typeof LayoutSettingsRoute;
  '/auth/forgot-password': typeof AuthForgotPasswordRoute;
  '/auth/login': typeof AuthLoginRoute;
  '/auth/reset-password': typeof AuthResetPasswordRoute;
  '/auth/signup': typeof AuthSignupRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/'
    | ''
    | '/explorer'
    | '/home'
    | '/profile'
    | '/settings'
    | '/auth/forgot-password'
    | '/auth/login'
    | '/auth/reset-password'
    | '/auth/signup';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | '/'
    | ''
    | '/explorer'
    | '/home'
    | '/profile'
    | '/settings'
    | '/auth/forgot-password'
    | '/auth/login'
    | '/auth/reset-password'
    | '/auth/signup';
  id:
    | '__root__'
    | '/'
    | '/_layout'
    | '/_layout/explorer'
    | '/_layout/home'
    | '/_layout/profile'
    | '/_layout/settings'
    | '/auth/forgot-password'
    | '/auth/login'
    | '/auth/reset-password'
    | '/auth/signup';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute;
  LayoutRoute: typeof LayoutRouteWithChildren;
  AuthForgotPasswordRoute: typeof AuthForgotPasswordRoute;
  AuthLoginRoute: typeof AuthLoginRoute;
  AuthResetPasswordRoute: typeof AuthResetPasswordRoute;
  AuthSignupRoute: typeof AuthSignupRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  LayoutRoute: LayoutRouteWithChildren,
  AuthForgotPasswordRoute: AuthForgotPasswordRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthResetPasswordRoute: AuthResetPasswordRoute,
  AuthSignupRoute: AuthSignupRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* prettier-ignore-end */
