// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from "@hey-api/client-fetch";
import { queryOptions, type UseMutationOptions } from "@tanstack/react-query";
import type {
  RegisterUserData,
  RegisterUserError,
  RegisterUserResponse,
  LoginUserData,
  LoginUserError,
  LoginUserResponse,
  LogoutUserError,
  LogoutUserResponse,
  ForgotPasswordData,
  ForgotPasswordError,
  ForgotPasswordResponse,
  ResetPasswordData,
  ResetPasswordError,
  ResetPasswordResponse,
  UpdateProfileData,
  UpdateProfileError,
  UpdateProfileResponse,
  ReadOtherUserData,
} from "../types.gen";
import {
  client,
  registerUser,
  loginUser,
  logoutUser,
  forgotPassword,
  resetPassword,
  readMe,
  updateProfile,
  readOtherUser,
} from "../services.gen";

type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): QueryKey<TOptions>[0] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? client).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return params;
};

export const registerUserQueryKey = (options: Options<RegisterUserData>) => [
  createQueryKey("registerUser", options),
];

export const registerUserOptions = (options: Options<RegisterUserData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await registerUser({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: registerUserQueryKey(options),
  });
};

export const registerUserMutation = () => {
  const mutationOptions: UseMutationOptions<
    RegisterUserResponse,
    RegisterUserError,
    Options<RegisterUserData>
  > = {
    mutationFn: async (options) => {
      const { data } = await registerUser({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const loginUserQueryKey = (options: Options<LoginUserData>) => [
  createQueryKey("loginUser", options),
];

export const loginUserOptions = (options: Options<LoginUserData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await loginUser({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: loginUserQueryKey(options),
  });
};

export const loginUserMutation = () => {
  const mutationOptions: UseMutationOptions<
    LoginUserResponse,
    LoginUserError,
    Options<LoginUserData>
  > = {
    mutationFn: async (options) => {
      const { data } = await loginUser({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const logoutUserQueryKey = (options?: Options) => [
  createQueryKey("logoutUser", options),
];

export const logoutUserOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await logoutUser({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: logoutUserQueryKey(options),
  });
};

export const logoutUserMutation = () => {
  const mutationOptions: UseMutationOptions<
    LogoutUserResponse,
    LogoutUserError,
    Options
  > = {
    mutationFn: async (options) => {
      const { data } = await logoutUser({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const forgotPasswordQueryKey = (
  options: Options<ForgotPasswordData>,
) => [createQueryKey("forgotPassword", options)];

export const forgotPasswordOptions = (options: Options<ForgotPasswordData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await forgotPassword({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: forgotPasswordQueryKey(options),
  });
};

export const forgotPasswordMutation = () => {
  const mutationOptions: UseMutationOptions<
    ForgotPasswordResponse,
    ForgotPasswordError,
    Options<ForgotPasswordData>
  > = {
    mutationFn: async (options) => {
      const { data } = await forgotPassword({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const resetPasswordQueryKey = (options: Options<ResetPasswordData>) => [
  createQueryKey("resetPassword", options),
];

export const resetPasswordOptions = (options: Options<ResetPasswordData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await resetPassword({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: resetPasswordQueryKey(options),
  });
};

export const resetPasswordMutation = () => {
  const mutationOptions: UseMutationOptions<
    ResetPasswordResponse,
    ResetPasswordError,
    Options<ResetPasswordData>
  > = {
    mutationFn: async (options) => {
      const { data } = await resetPassword({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const readMeQueryKey = (options?: Options) => [
  createQueryKey("readMe", options),
];

export const readMeOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await readMe({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: readMeQueryKey(options),
  });
};

export const updateProfileQueryKey = (options: Options<UpdateProfileData>) => [
  createQueryKey("updateProfile", options),
];

export const updateProfileOptions = (options: Options<UpdateProfileData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await updateProfile({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: updateProfileQueryKey(options),
  });
};

export const updateProfileMutation = () => {
  const mutationOptions: UseMutationOptions<
    UpdateProfileResponse,
    UpdateProfileError,
    Options<UpdateProfileData>
  > = {
    mutationFn: async (options) => {
      const { data } = await updateProfile({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const readOtherUserQueryKey = (options: Options<ReadOtherUserData>) => [
  createQueryKey("readOtherUser", options),
];

export const readOtherUserOptions = (options: Options<ReadOtherUserData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await readOtherUser({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: readOtherUserQueryKey(options),
  });
};
