// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '@hey-api/client-fetch';
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import type {
  RegisterUserData,
  RegisterUserError,
  RegisterUserResponse,
  LoginUserData,
  LoginUserError,
  LoginUserResponse,
} from '../types.gen';
import { client, registerUser, loginUser } from '../services.gen';

type QueryKey<TOptions extends Options> = [
  Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): QueryKey<TOptions>[0] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? client).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return params;
};

export const registerUserQueryKey = (options: Options<RegisterUserData>) => [
  createQueryKey('registerUser', options),
];

export const registerUserOptions = (options: Options<RegisterUserData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await registerUser({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: registerUserQueryKey(options),
  });
};

export const registerUserMutation = () => {
  const mutationOptions: UseMutationOptions<
    RegisterUserResponse,
    RegisterUserError,
    Options<RegisterUserData>
  > = {
    mutationFn: async (options) => {
      const { data } = await registerUser({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const loginUserQueryKey = (options: Options<LoginUserData>) => [
  createQueryKey('loginUser', options),
];

export const loginUserOptions = (options: Options<LoginUserData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await loginUser({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      });
      return data;
    },
    queryKey: loginUserQueryKey(options),
  });
};

export const loginUserMutation = () => {
  const mutationOptions: UseMutationOptions<
    LoginUserResponse,
    LoginUserError,
    Options<LoginUserData>
  > = {
    mutationFn: async (options) => {
      const { data } = await loginUser({
        ...options,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};
