// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type Options,
  urlSearchParamsBodySerializer,
} from '@hey-api/client-fetch';
import type {
  RegisterUserData,
  RegisterUserError,
  RegisterUserResponse,
  LoginUserData,
  LoginUserError,
  LoginUserResponse,
  LogoutUserError,
  LogoutUserResponse,
  ForgotPasswordData,
  ForgotPasswordError,
  ForgotPasswordResponse,
  ResetPasswordData,
  ResetPasswordError,
  ResetPasswordResponse,
  ReadUserError,
  ReadUserResponse,
} from './types.gen';

export const client = createClient(createConfig());

/**
 * Register User
 * Register a new user in the system.
 *
 * Args:
 * session: The database session dependency.
 * user_in: UserCreate model containing user details.
 *
 * Returns:
 * SuccessResponse indicating successful registration.
 *
 * Raises:
 * HTTPException: If user registration fails.
 */
export const registerUser = <ThrowOnError extends boolean = false>(
  options: Options<RegisterUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    RegisterUserResponse,
    RegisterUserError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/register',
  });
};

/**
 * Login User
 * Authenticate a user and issue an access token.
 *
 * Args:
 * response: The response object to set cookies.
 * session: The database session dependency.
 * form: OAuth2PasswordRequestForm containing username and password.
 *
 * Returns:
 * SuccessResponse indicating successful login.
 *
 * Raises:
 * HTTPException: If authentication fails or if the user ID is missing.
 */
export const loginUser = <ThrowOnError extends boolean = false>(
  options: Options<LoginUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    LoginUserResponse,
    LoginUserError,
    ThrowOnError
  >({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/api/v1/login/access-token',
  });
};

/**
 * Logout User
 * Logout a user by clearing the access token cookie.
 */
export const logoutUser = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    LogoutUserResponse,
    LogoutUserError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/logout',
  });
};

/**
 * Forgot Password
 * Handle a forgot password request by generating and returning a reset token.
 */
export const forgotPassword = <ThrowOnError extends boolean = false>(
  options: Options<ForgotPasswordData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    ForgotPasswordResponse,
    ForgotPasswordError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/forgot-password',
  });
};

/**
 * Reset Password
 * Reset the user's password using a valid reset token.
 */
export const resetPassword = <ThrowOnError extends boolean = false>(
  options: Options<ResetPasswordData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    ResetPasswordResponse,
    ResetPasswordError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/reset-password',
  });
};

/**
 * Read User
 */
export const readUser = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ReadUserResponse,
    ReadUserError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/users/me',
  });
};
