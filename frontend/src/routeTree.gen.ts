/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LayoutImport } from './routes/_layout'
import { Route as AuthSignupImport } from './routes/auth/signup'
import { Route as AuthRecoverPasswordImport } from './routes/auth/recover-password'
import { Route as AuthLoginImport } from './routes/auth/login'
import { Route as AuthForgotPasswordImport } from './routes/auth/forgot-password'
import { Route as LayoutSavedImport } from './routes/_layout/saved'
import { Route as LayoutHomeImport } from './routes/_layout/home'
import { Route as LayoutExplorerImport } from './routes/_layout/explorer'
import { Route as LayoutProfileImport } from './routes/_layout/$profile'
import { Route as LayoutPPostIdImport } from './routes/_layout/p/$postId'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const AuthSignupRoute = AuthSignupImport.update({
  id: '/auth/signup',
  path: '/auth/signup',
  getParentRoute: () => rootRoute,
} as any)

const AuthRecoverPasswordRoute = AuthRecoverPasswordImport.update({
  id: '/auth/recover-password',
  path: '/auth/recover-password',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthForgotPasswordRoute = AuthForgotPasswordImport.update({
  id: '/auth/forgot-password',
  path: '/auth/forgot-password',
  getParentRoute: () => rootRoute,
} as any)

const LayoutSavedRoute = LayoutSavedImport.update({
  id: '/saved',
  path: '/saved',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutHomeRoute = LayoutHomeImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutExplorerRoute = LayoutExplorerImport.update({
  id: '/explorer',
  path: '/explorer',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutProfileRoute = LayoutProfileImport.update({
  id: '/$profile',
  path: '/$profile',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutPPostIdRoute = LayoutPPostIdImport.update({
  id: '/p/$postId',
  path: '/p/$postId',
  getParentRoute: () => LayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/_layout/$profile': {
      id: '/_layout/$profile'
      path: '/$profile'
      fullPath: '/$profile'
      preLoaderRoute: typeof LayoutProfileImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/explorer': {
      id: '/_layout/explorer'
      path: '/explorer'
      fullPath: '/explorer'
      preLoaderRoute: typeof LayoutExplorerImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/home': {
      id: '/_layout/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof LayoutHomeImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/saved': {
      id: '/_layout/saved'
      path: '/saved'
      fullPath: '/saved'
      preLoaderRoute: typeof LayoutSavedImport
      parentRoute: typeof LayoutImport
    }
    '/auth/forgot-password': {
      id: '/auth/forgot-password'
      path: '/auth/forgot-password'
      fullPath: '/auth/forgot-password'
      preLoaderRoute: typeof AuthForgotPasswordImport
      parentRoute: typeof rootRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof rootRoute
    }
    '/auth/recover-password': {
      id: '/auth/recover-password'
      path: '/auth/recover-password'
      fullPath: '/auth/recover-password'
      preLoaderRoute: typeof AuthRecoverPasswordImport
      parentRoute: typeof rootRoute
    }
    '/auth/signup': {
      id: '/auth/signup'
      path: '/auth/signup'
      fullPath: '/auth/signup'
      preLoaderRoute: typeof AuthSignupImport
      parentRoute: typeof rootRoute
    }
    '/_layout/p/$postId': {
      id: '/_layout/p/$postId'
      path: '/p/$postId'
      fullPath: '/p/$postId'
      preLoaderRoute: typeof LayoutPPostIdImport
      parentRoute: typeof LayoutImport
    }
  }
}

// Create and export the route tree

interface LayoutRouteChildren {
  LayoutProfileRoute: typeof LayoutProfileRoute
  LayoutExplorerRoute: typeof LayoutExplorerRoute
  LayoutHomeRoute: typeof LayoutHomeRoute
  LayoutSavedRoute: typeof LayoutSavedRoute
  LayoutPPostIdRoute: typeof LayoutPPostIdRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutProfileRoute: LayoutProfileRoute,
  LayoutExplorerRoute: LayoutExplorerRoute,
  LayoutHomeRoute: LayoutHomeRoute,
  LayoutSavedRoute: LayoutSavedRoute,
  LayoutPPostIdRoute: LayoutPPostIdRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '': typeof LayoutRouteWithChildren
  '/$profile': typeof LayoutProfileRoute
  '/explorer': typeof LayoutExplorerRoute
  '/home': typeof LayoutHomeRoute
  '/saved': typeof LayoutSavedRoute
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/recover-password': typeof AuthRecoverPasswordRoute
  '/auth/signup': typeof AuthSignupRoute
  '/p/$postId': typeof LayoutPPostIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '': typeof LayoutRouteWithChildren
  '/$profile': typeof LayoutProfileRoute
  '/explorer': typeof LayoutExplorerRoute
  '/home': typeof LayoutHomeRoute
  '/saved': typeof LayoutSavedRoute
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/recover-password': typeof AuthRecoverPasswordRoute
  '/auth/signup': typeof AuthSignupRoute
  '/p/$postId': typeof LayoutPPostIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/_layout/$profile': typeof LayoutProfileRoute
  '/_layout/explorer': typeof LayoutExplorerRoute
  '/_layout/home': typeof LayoutHomeRoute
  '/_layout/saved': typeof LayoutSavedRoute
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/recover-password': typeof AuthRecoverPasswordRoute
  '/auth/signup': typeof AuthSignupRoute
  '/_layout/p/$postId': typeof LayoutPPostIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/$profile'
    | '/explorer'
    | '/home'
    | '/saved'
    | '/auth/forgot-password'
    | '/auth/login'
    | '/auth/recover-password'
    | '/auth/signup'
    | '/p/$postId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/$profile'
    | '/explorer'
    | '/home'
    | '/saved'
    | '/auth/forgot-password'
    | '/auth/login'
    | '/auth/recover-password'
    | '/auth/signup'
    | '/p/$postId'
  id:
    | '__root__'
    | '/'
    | '/_layout'
    | '/_layout/$profile'
    | '/_layout/explorer'
    | '/_layout/home'
    | '/_layout/saved'
    | '/auth/forgot-password'
    | '/auth/login'
    | '/auth/recover-password'
    | '/auth/signup'
    | '/_layout/p/$postId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  LayoutRoute: typeof LayoutRouteWithChildren
  AuthForgotPasswordRoute: typeof AuthForgotPasswordRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRecoverPasswordRoute: typeof AuthRecoverPasswordRoute
  AuthSignupRoute: typeof AuthSignupRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  LayoutRoute: LayoutRouteWithChildren,
  AuthForgotPasswordRoute: AuthForgotPasswordRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthRecoverPasswordRoute: AuthRecoverPasswordRoute,
  AuthSignupRoute: AuthSignupRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_layout",
        "/auth/forgot-password",
        "/auth/login",
        "/auth/recover-password",
        "/auth/signup"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/$profile",
        "/_layout/explorer",
        "/_layout/home",
        "/_layout/saved",
        "/_layout/p/$postId"
      ]
    },
    "/_layout/$profile": {
      "filePath": "_layout/$profile.tsx",
      "parent": "/_layout"
    },
    "/_layout/explorer": {
      "filePath": "_layout/explorer.tsx",
      "parent": "/_layout"
    },
    "/_layout/home": {
      "filePath": "_layout/home.tsx",
      "parent": "/_layout"
    },
    "/_layout/saved": {
      "filePath": "_layout/saved.tsx",
      "parent": "/_layout"
    },
    "/auth/forgot-password": {
      "filePath": "auth/forgot-password.tsx"
    },
    "/auth/login": {
      "filePath": "auth/login.tsx"
    },
    "/auth/recover-password": {
      "filePath": "auth/recover-password.tsx"
    },
    "/auth/signup": {
      "filePath": "auth/signup.tsx"
    },
    "/_layout/p/$postId": {
      "filePath": "_layout/p/$postId.tsx",
      "parent": "/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
