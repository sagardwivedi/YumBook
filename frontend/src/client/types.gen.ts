// This file is auto-generated by @hey-api/openapi-ts

export type BodyAuthLoginUser = {
  grant_type?: string | null;
  username: string;
  password: string;
  scope?: string;
  client_id?: string | null;
  client_secret?: string | null;
};

export type BodyRecipeCreateComment = {
  comment: string;
};

export type BodyRecipeCreateRecipe = {
  recipe: string;
  image: Blob | File;
};

export type BodyUsersFollowUser = {
  follow_request: string;
};

export type BodyUsersUpdateProfileImage = {
  file: Blob | File;
};

export type BodyUsersUploadProfileImage = {
  file: Blob | File;
};

export type Comment = {
  id?: string;
  content: string;
  created_at?: string;
  recipe_id: string;
  user_id: string;
};

export type ErrorResponse = {
  detail: string;
};

export type ForgotPasswordData = {
  email: string;
};

export type HttpValidationError = {
  detail?: Array<ValidationError>;
};

export type LikePublic = {
  user_id: string;
};

export type RecipeCreate = {
  cuisine: string;
  instructions: Array<string>;
  servings: number;
  name: string;
  cooking_time: number;
  dietary_restrictions: Array<string>;
  preparation_time: number;
  tags: Array<string>;
  description: string;
  difficulty: string;
};

export type RecipePublic = {
  name: string;
  description: string;
  instructions?: Array<string>;
  cooking_time: number;
  preparation_time: number;
  difficulty: string;
  servings: number;
  cuisine: string;
  dietary_restrictions?: Array<string>;
  tags?: Array<string>;
  total_liked?: number;
  id: string;
  created_at: string;
  image_url: string;
  likes: Array<LikePublic>;
};

export type RecipeTrending = {
  id: string;
  image_url: string;
  name: string;
  username: string;
};

export type RecipeWithUser = {
  recipe: RecipePublic;
  user: UserForRecipe;
};

export type ResetPasswordData = {
  token: string;
  new_password: string;
};

export type SuccessResponse = {
  detail: string;
};

export type SuccessResponseWithData = {
  detail: string;
  data: {
    [key: string]: unknown;
  };
};

export type UserCreate = {
  /**
   * User's password
   */
  password: string;
  /**
   * Unique username
   */
  username: string;
  /**
   * User's email address
   */
  email: string;
  /**
   * User's full name
   */
  full_name?: string | null;
};

export type UserForRecipe = {
  id: string;
  avatar_path: string | null;
  username: string;
};

export type UserPublic = {
  /**
   * Unique username
   */
  username: string;
  /**
   * User's email address
   */
  email: string;
  /**
   * Path to user's avatar image
   */
  avatar_path?: string | null;
  /**
   * User's full name
   */
  full_name?: string | null;
  id: string;
};

export type UserUpdate = {
  username?: string | null;
  email?: string | null;
  avatar_path?: string | null;
  full_name?: string | null;
};

export type ValidationError = {
  loc: Array<string | number>;
  msg: string;
  type: string;
};

export type RegisterUserData = {
  body: UserCreate;
  path?: never;
  query?: never;
  url: "/api/v1/register";
};

export type RegisterUserErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type RegisterUserError = RegisterUserErrors[keyof RegisterUserErrors];

export type RegisterUserResponses = {
  /**
   * Successful Response
   */
  200: SuccessResponse;
};

export type RegisterUserResponse =
  RegisterUserResponses[keyof RegisterUserResponses];

export type LoginUserData = {
  body: BodyAuthLoginUser;
  path?: never;
  query?: never;
  url: "/api/v1/login/access-token";
};

export type LoginUserErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type LoginUserError = LoginUserErrors[keyof LoginUserErrors];

export type LoginUserResponses = {
  /**
   * Successful Response
   */
  200: SuccessResponse;
};

export type LoginUserResponse = LoginUserResponses[keyof LoginUserResponses];

export type LogoutUserData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/logout";
};

export type LogoutUserErrors = {
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type LogoutUserError = LogoutUserErrors[keyof LogoutUserErrors];

export type LogoutUserResponses = {
  /**
   * Successful Response
   */
  200: SuccessResponse;
};

export type LogoutUserResponse = LogoutUserResponses[keyof LogoutUserResponses];

export type ForgotPasswordData2 = {
  body: ForgotPasswordData;
  path?: never;
  query?: never;
  url: "/api/v1/forgot-password";
};

export type ForgotPasswordErrors = {
  /**
   * Not Found
   */
  404: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type ForgotPasswordError =
  ForgotPasswordErrors[keyof ForgotPasswordErrors];

export type ForgotPasswordResponses = {
  /**
   * Successful Response
   */
  200: SuccessResponseWithData;
};

export type ForgotPasswordResponse =
  ForgotPasswordResponses[keyof ForgotPasswordResponses];

export type ResetPasswordData2 = {
  body: ResetPasswordData;
  path?: never;
  query?: never;
  url: "/api/v1/reset-password";
};

export type ResetPasswordErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type ResetPasswordError = ResetPasswordErrors[keyof ResetPasswordErrors];

export type ResetPasswordResponses = {
  /**
   * Successful Response
   */
  200: SuccessResponse;
};

export type ResetPasswordResponse =
  ResetPasswordResponses[keyof ResetPasswordResponses];

export type GetCurrentUserData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/users/me";
};

export type GetCurrentUserErrors = {
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
};

export type GetCurrentUserError =
  GetCurrentUserErrors[keyof GetCurrentUserErrors];

export type GetCurrentUserResponses = {
  /**
   * Successful Response
   */
  200: UserPublic;
};

export type GetCurrentUserResponse =
  GetCurrentUserResponses[keyof GetCurrentUserResponses];

export type UpdateCurrentUserData = {
  body: UserUpdate;
  path?: never;
  query?: never;
  url: "/api/v1/users/me";
};

export type UpdateCurrentUserErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type UpdateCurrentUserError =
  UpdateCurrentUserErrors[keyof UpdateCurrentUserErrors];

export type UpdateCurrentUserResponses = {
  /**
   * Successful Response
   */
  200: UserPublic;
};

export type UpdateCurrentUserResponse =
  UpdateCurrentUserResponses[keyof UpdateCurrentUserResponses];

export type GetUserByUsernameData = {
  body?: never;
  path: {
    username: string;
  };
  query?: never;
  url: "/api/v1/users/{username}";
};

export type GetUserByUsernameErrors = {
  /**
   * Not Found
   */
  404: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetUserByUsernameError =
  GetUserByUsernameErrors[keyof GetUserByUsernameErrors];

export type GetUserByUsernameResponses = {
  /**
   * Successful Response
   */
  200: UserPublic;
};

export type GetUserByUsernameResponse =
  GetUserByUsernameResponses[keyof GetUserByUsernameResponses];

export type DeleteProfileImageData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/users/profile-image";
};

export type DeleteProfileImageErrors = {
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type DeleteProfileImageError =
  DeleteProfileImageErrors[keyof DeleteProfileImageErrors];

export type DeleteProfileImageResponses = {
  /**
   * Successful Response
   */
  200: SuccessResponse;
};

export type DeleteProfileImageResponse =
  DeleteProfileImageResponses[keyof DeleteProfileImageResponses];

export type UploadProfileImageData = {
  body: BodyUsersUploadProfileImage;
  path?: never;
  query?: never;
  url: "/api/v1/users/profile-image";
};

export type UploadProfileImageErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type UploadProfileImageError =
  UploadProfileImageErrors[keyof UploadProfileImageErrors];

export type UploadProfileImageResponses = {
  /**
   * Successful Response
   */
  200: SuccessResponseWithData;
};

export type UploadProfileImageResponse =
  UploadProfileImageResponses[keyof UploadProfileImageResponses];

export type UpdateProfileImageData = {
  body: BodyUsersUpdateProfileImage;
  path?: never;
  query?: never;
  url: "/api/v1/users/profile-image";
};

export type UpdateProfileImageErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type UpdateProfileImageError =
  UpdateProfileImageErrors[keyof UpdateProfileImageErrors];

export type UpdateProfileImageResponses = {
  /**
   * Successful Response
   */
  200: SuccessResponseWithData;
};

export type UpdateProfileImageResponse =
  UpdateProfileImageResponses[keyof UpdateProfileImageResponses];

export type FollowUserData = {
  body: BodyUsersFollowUser;
  path?: never;
  query?: never;
  url: "/api/v1/users/follow";
};

export type FollowUserErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type FollowUserError = FollowUserErrors[keyof FollowUserErrors];

export type FollowUserResponses = {
  /**
   * Successful Response
   */
  200: UserPublic;
};

export type FollowUserResponse = FollowUserResponses[keyof FollowUserResponses];

export type GetRecipesData = {
  body?: never;
  path?: never;
  query?: {
    skip?: number;
    limit?: number;
  };
  url: "/api/v1/recipe/";
};

export type GetRecipesErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetRecipesError = GetRecipesErrors[keyof GetRecipesErrors];

export type GetRecipesResponses = {
  /**
   * Successful Response
   */
  200: Array<RecipeWithUser>;
};

export type GetRecipesResponse = GetRecipesResponses[keyof GetRecipesResponses];

export type GetRecipeData = {
  body?: never;
  path: {
    recipe_id: string;
  };
  query?: never;
  url: "/api/v1/recipe/p/{recipe_id}";
};

export type GetRecipeErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetRecipeError = GetRecipeErrors[keyof GetRecipeErrors];

export type GetRecipeResponses = {
  /**
   * Successful Response
   */
  200: RecipePublic;
};

export type GetRecipeResponse = GetRecipeResponses[keyof GetRecipeResponses];

export type CreateRecipeData = {
  body: BodyRecipeCreateRecipe;
  path?: never;
  query?: never;
  url: "/api/v1/recipe/create";
};

export type CreateRecipeErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type CreateRecipeError = CreateRecipeErrors[keyof CreateRecipeErrors];

export type CreateRecipeResponses = {
  /**
   * Successful Response
   */
  200: RecipePublic;
};

export type CreateRecipeResponse =
  CreateRecipeResponses[keyof CreateRecipeResponses];

export type DeleteRecipeData = {
  body?: never;
  path: {
    recipe_id: string;
  };
  query?: never;
  url: "/api/v1/recipe/delete/{recipe_id}";
};

export type DeleteRecipeErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type DeleteRecipeError = DeleteRecipeErrors[keyof DeleteRecipeErrors];

export type DeleteRecipeResponses = {
  /**
   * Successful Response
   */
  200: {
    [key: string]: unknown;
  };
};

export type DeleteRecipeResponse =
  DeleteRecipeResponses[keyof DeleteRecipeResponses];

export type SearchRecipesData = {
  body?: never;
  path?: never;
  query: {
    query: string;
    cuisine?: string | null;
    max_cooking_time?: number | null;
    tags?: Array<string> | null;
  };
  url: "/api/v1/recipe/search";
};

export type SearchRecipesErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type SearchRecipesError = SearchRecipesErrors[keyof SearchRecipesErrors];

export type SearchRecipesResponses = {
  /**
   * Successful Response
   */
  200: Array<RecipePublic>;
};

export type SearchRecipesResponse =
  SearchRecipesResponses[keyof SearchRecipesResponses];

export type GetTrendingRecipesData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/recipe/trends";
};

export type GetTrendingRecipesResponses = {
  /**
   * Successful Response
   */
  200: Array<RecipeTrending>;
};

export type GetTrendingRecipesResponse =
  GetTrendingRecipesResponses[keyof GetTrendingRecipesResponses];

export type GetSimilarRecipesData = {
  body?: never;
  path: {
    recipe_id: string;
  };
  query?: {
    limit?: number;
  };
  url: "/api/v1/recipe/{recipe_id}/similar";
};

export type GetSimilarRecipesErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetSimilarRecipesError =
  GetSimilarRecipesErrors[keyof GetSimilarRecipesErrors];

export type GetSimilarRecipesResponses = {
  /**
   * Successful Response
   */
  200: Array<RecipePublic>;
};

export type GetSimilarRecipesResponse =
  GetSimilarRecipesResponses[keyof GetSimilarRecipesResponses];

export type GetUserRecipesData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/recipe/me";
};

export type GetUserRecipesResponses = {
  /**
   * Successful Response
   */
  200: Array<RecipePublic>;
};

export type GetUserRecipesResponse =
  GetUserRecipesResponses[keyof GetUserRecipesResponses];

export type UnlikeRecipeData = {
  body?: never;
  path: {
    recipe_id: string;
  };
  query?: never;
  url: "/api/v1/recipe/{recipe_id}/like";
};

export type UnlikeRecipeErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type UnlikeRecipeError = UnlikeRecipeErrors[keyof UnlikeRecipeErrors];

export type UnlikeRecipeResponses = {
  /**
   * Successful Response
   */
  200: SuccessResponse;
};

export type UnlikeRecipeResponse =
  UnlikeRecipeResponses[keyof UnlikeRecipeResponses];

export type LikeRecipeData = {
  body?: never;
  path: {
    recipe_id: string;
  };
  query?: never;
  url: "/api/v1/recipe/{recipe_id}/like";
};

export type LikeRecipeErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Not Found
   */
  404: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type LikeRecipeError = LikeRecipeErrors[keyof LikeRecipeErrors];

export type LikeRecipeResponses = {
  /**
   * Successful Response
   */
  200: SuccessResponse;
};

export type LikeRecipeResponse = LikeRecipeResponses[keyof LikeRecipeResponses];

export type GetCommentsData = {
  body?: never;
  path: {
    recipe_id: string;
  };
  query?: {
    skip?: number;
    limit?: number;
  };
  url: "/api/v1/recipe/{recipe_id}/comments";
};

export type GetCommentsErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetCommentsError = GetCommentsErrors[keyof GetCommentsErrors];

export type GetCommentsResponses = {
  /**
   * Successful Response
   */
  200: Array<Comment>;
};

export type GetCommentsResponse =
  GetCommentsResponses[keyof GetCommentsResponses];

export type CreateCommentData = {
  body: BodyRecipeCreateComment;
  path: {
    recipe_id: string;
  };
  query?: never;
  url: "/api/v1/recipe/{recipe_id}/comments";
};

export type CreateCommentErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type CreateCommentError = CreateCommentErrors[keyof CreateCommentErrors];

export type CreateCommentResponses = {
  /**
   * Successful Response
   */
  201: SuccessResponse;
};

export type CreateCommentResponse =
  CreateCommentResponses[keyof CreateCommentResponses];

export type GetLikersData = {
  body?: never;
  path: {
    recipe_id: string;
  };
  query?: never;
  url: "/api/v1/recipe/{recipe_id}/likes";
};

export type GetLikersErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type GetLikersError = GetLikersErrors[keyof GetLikersErrors];

export type GetLikersResponses = {
  /**
   * Successful Response
   */
  200: Array<UserForRecipe>;
};

export type GetLikersResponse = GetLikersResponses[keyof GetLikersResponses];
