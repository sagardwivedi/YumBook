// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from "@hey-api/client-fetch";
import { queryOptions, type UseMutationOptions } from "@tanstack/react-query";
import type {
  RegisterUserData,
  RegisterUserError,
  RegisterUserResponse,
  LoginUserData,
  LoginUserError,
  LoginUserResponse,
  LogoutUserData,
  LogoutUserError,
  LogoutUserResponse,
  ForgotPasswordData2,
  ForgotPasswordError,
  ForgotPasswordResponse,
  ResetPasswordData2,
  ResetPasswordError,
  ResetPasswordResponse,
  GetCurrentUserData,
  UpdateCurrentUserData,
  UpdateCurrentUserError,
  UpdateCurrentUserResponse,
  GetUserByUsernameData,
  DeleteProfileImageData,
  DeleteProfileImageError,
  DeleteProfileImageResponse,
  UploadProfileImageData,
  UploadProfileImageError,
  UploadProfileImageResponse,
  UpdateProfileImageData,
  UpdateProfileImageError,
  UpdateProfileImageResponse,
  FollowUserData,
  FollowUserError,
  FollowUserResponse,
  GetRecipesData,
  GetRecipeData,
  CreateRecipeData,
  CreateRecipeError,
  CreateRecipeResponse,
  DeleteRecipeData,
  DeleteRecipeError,
  DeleteRecipeResponse,
  SearchRecipesData,
  GetTrendingRecipesData,
  GetSimilarRecipesData,
  GetUserRecipesData,
  UnlikeRecipeData,
  UnlikeRecipeError,
  UnlikeRecipeResponse,
  LikeRecipeData,
  LikeRecipeError,
  LikeRecipeResponse,
  GetCommentsData,
  CreateCommentData,
  CreateCommentError,
  CreateCommentResponse,
  GetLikersData,
} from "../types.gen";
import {
  client,
  registerUser,
  loginUser,
  logoutUser,
  forgotPassword,
  resetPassword,
  getCurrentUser,
  updateCurrentUser,
  getUserByUsername,
  deleteProfileImage,
  uploadProfileImage,
  updateProfileImage,
  followUser,
  getRecipes,
  getRecipe,
  createRecipe,
  deleteRecipe,
  searchRecipes,
  getTrendingRecipes,
  getSimilarRecipes,
  getUserRecipes,
  unlikeRecipe,
  likeRecipe,
  getComments,
  createComment,
  getLikers,
} from "../sdk.gen";

type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): QueryKey<TOptions>[0] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? client).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return params;
};

export const registerUserQueryKey = (options: Options<RegisterUserData>) => [
  createQueryKey("registerUser", options),
];

export const registerUserOptions = (options: Options<RegisterUserData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await registerUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: registerUserQueryKey(options),
  });
};

export const registerUserMutation = (
  options?: Partial<Options<RegisterUserData>>,
) => {
  const mutationOptions: UseMutationOptions<
    RegisterUserResponse,
    RegisterUserError,
    Options<RegisterUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await registerUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const loginUserQueryKey = (options: Options<LoginUserData>) => [
  createQueryKey("loginUser", options),
];

export const loginUserOptions = (options: Options<LoginUserData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await loginUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: loginUserQueryKey(options),
  });
};

export const loginUserMutation = (
  options?: Partial<Options<LoginUserData>>,
) => {
  const mutationOptions: UseMutationOptions<
    LoginUserResponse,
    LoginUserError,
    Options<LoginUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await loginUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const logoutUserQueryKey = (options?: Options<LogoutUserData>) => [
  createQueryKey("logoutUser", options),
];

export const logoutUserOptions = (options?: Options<LogoutUserData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await logoutUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: logoutUserQueryKey(options),
  });
};

export const logoutUserMutation = (
  options?: Partial<Options<LogoutUserData>>,
) => {
  const mutationOptions: UseMutationOptions<
    LogoutUserResponse,
    LogoutUserError,
    Options<LogoutUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await logoutUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const forgotPasswordQueryKey = (
  options: Options<ForgotPasswordData2>,
) => [createQueryKey("forgotPassword", options)];

export const forgotPasswordOptions = (
  options: Options<ForgotPasswordData2>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await forgotPassword({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: forgotPasswordQueryKey(options),
  });
};

export const forgotPasswordMutation = (
  options?: Partial<Options<ForgotPasswordData2>>,
) => {
  const mutationOptions: UseMutationOptions<
    ForgotPasswordResponse,
    ForgotPasswordError,
    Options<ForgotPasswordData2>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await forgotPassword({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const resetPasswordQueryKey = (options: Options<ResetPasswordData2>) => [
  createQueryKey("resetPassword", options),
];

export const resetPasswordOptions = (options: Options<ResetPasswordData2>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await resetPassword({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: resetPasswordQueryKey(options),
  });
};

export const resetPasswordMutation = (
  options?: Partial<Options<ResetPasswordData2>>,
) => {
  const mutationOptions: UseMutationOptions<
    ResetPasswordResponse,
    ResetPasswordError,
    Options<ResetPasswordData2>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await resetPassword({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getCurrentUserQueryKey = (
  options?: Options<GetCurrentUserData>,
) => [createQueryKey("getCurrentUser", options)];

export const getCurrentUserOptions = (
  options?: Options<GetCurrentUserData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getCurrentUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getCurrentUserQueryKey(options),
  });
};

export const updateCurrentUserMutation = (
  options?: Partial<Options<UpdateCurrentUserData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UpdateCurrentUserResponse,
    UpdateCurrentUserError,
    Options<UpdateCurrentUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updateCurrentUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getUserByUsernameQueryKey = (
  options: Options<GetUserByUsernameData>,
) => [createQueryKey("getUserByUsername", options)];

export const getUserByUsernameOptions = (
  options: Options<GetUserByUsernameData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getUserByUsername({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getUserByUsernameQueryKey(options),
  });
};

export const deleteProfileImageMutation = (
  options?: Partial<Options<DeleteProfileImageData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteProfileImageResponse,
    DeleteProfileImageError,
    Options<DeleteProfileImageData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteProfileImage({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const uploadProfileImageQueryKey = (
  options: Options<UploadProfileImageData>,
) => [createQueryKey("uploadProfileImage", options)];

export const uploadProfileImageOptions = (
  options: Options<UploadProfileImageData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await uploadProfileImage({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: uploadProfileImageQueryKey(options),
  });
};

export const uploadProfileImageMutation = (
  options?: Partial<Options<UploadProfileImageData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UploadProfileImageResponse,
    UploadProfileImageError,
    Options<UploadProfileImageData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await uploadProfileImage({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const updateProfileImageMutation = (
  options?: Partial<Options<UpdateProfileImageData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UpdateProfileImageResponse,
    UpdateProfileImageError,
    Options<UpdateProfileImageData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updateProfileImage({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const followUserQueryKey = (options: Options<FollowUserData>) => [
  createQueryKey("followUser", options),
];

export const followUserOptions = (options: Options<FollowUserData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await followUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: followUserQueryKey(options),
  });
};

export const followUserMutation = (
  options?: Partial<Options<FollowUserData>>,
) => {
  const mutationOptions: UseMutationOptions<
    FollowUserResponse,
    FollowUserError,
    Options<FollowUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await followUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getRecipesQueryKey = (options?: Options<GetRecipesData>) => [
  createQueryKey("getRecipes", options),
];

export const getRecipesOptions = (options?: Options<GetRecipesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getRecipes({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getRecipesQueryKey(options),
  });
};

export const getRecipeQueryKey = (options: Options<GetRecipeData>) => [
  createQueryKey("getRecipe", options),
];

export const getRecipeOptions = (options: Options<GetRecipeData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getRecipe({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getRecipeQueryKey(options),
  });
};

export const createRecipeQueryKey = (options: Options<CreateRecipeData>) => [
  createQueryKey("createRecipe", options),
];

export const createRecipeOptions = (options: Options<CreateRecipeData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createRecipe({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createRecipeQueryKey(options),
  });
};

export const createRecipeMutation = (
  options?: Partial<Options<CreateRecipeData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreateRecipeResponse,
    CreateRecipeError,
    Options<CreateRecipeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createRecipe({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteRecipeMutation = (
  options?: Partial<Options<DeleteRecipeData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteRecipeResponse,
    DeleteRecipeError,
    Options<DeleteRecipeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteRecipe({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const searchRecipesQueryKey = (options: Options<SearchRecipesData>) => [
  createQueryKey("searchRecipes", options),
];

export const searchRecipesOptions = (options: Options<SearchRecipesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await searchRecipes({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: searchRecipesQueryKey(options),
  });
};

export const getTrendingRecipesQueryKey = (
  options?: Options<GetTrendingRecipesData>,
) => [createQueryKey("getTrendingRecipes", options)];

export const getTrendingRecipesOptions = (
  options?: Options<GetTrendingRecipesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getTrendingRecipes({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getTrendingRecipesQueryKey(options),
  });
};

export const getSimilarRecipesQueryKey = (
  options: Options<GetSimilarRecipesData>,
) => [createQueryKey("getSimilarRecipes", options)];

export const getSimilarRecipesOptions = (
  options: Options<GetSimilarRecipesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getSimilarRecipes({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getSimilarRecipesQueryKey(options),
  });
};

export const getUserRecipesQueryKey = (
  options?: Options<GetUserRecipesData>,
) => [createQueryKey("getUserRecipes", options)];

export const getUserRecipesOptions = (
  options?: Options<GetUserRecipesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getUserRecipes({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getUserRecipesQueryKey(options),
  });
};

export const unlikeRecipeMutation = (
  options?: Partial<Options<UnlikeRecipeData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UnlikeRecipeResponse,
    UnlikeRecipeError,
    Options<UnlikeRecipeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await unlikeRecipe({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const likeRecipeQueryKey = (options: Options<LikeRecipeData>) => [
  createQueryKey("likeRecipe", options),
];

export const likeRecipeOptions = (options: Options<LikeRecipeData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await likeRecipe({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: likeRecipeQueryKey(options),
  });
};

export const likeRecipeMutation = (
  options?: Partial<Options<LikeRecipeData>>,
) => {
  const mutationOptions: UseMutationOptions<
    LikeRecipeResponse,
    LikeRecipeError,
    Options<LikeRecipeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await likeRecipe({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getCommentsQueryKey = (options: Options<GetCommentsData>) => [
  createQueryKey("getComments", options),
];

export const getCommentsOptions = (options: Options<GetCommentsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getComments({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getCommentsQueryKey(options),
  });
};

export const createCommentQueryKey = (options: Options<CreateCommentData>) => [
  createQueryKey("createComment", options),
];

export const createCommentOptions = (options: Options<CreateCommentData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createComment({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createCommentQueryKey(options),
  });
};

export const createCommentMutation = (
  options?: Partial<Options<CreateCommentData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreateCommentResponse,
    CreateCommentError,
    Options<CreateCommentData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createComment({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getLikersQueryKey = (options: Options<GetLikersData>) => [
  createQueryKey("getLikers", options),
];

export const getLikersOptions = (options: Options<GetLikersData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getLikers({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getLikersQueryKey(options),
  });
};
