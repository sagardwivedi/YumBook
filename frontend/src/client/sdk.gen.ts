// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type Options,
  urlSearchParamsBodySerializer,
  formDataBodySerializer,
} from "@hey-api/client-fetch";
import type {
  RegisterUserData,
  RegisterUserError,
  RegisterUserResponse,
  LoginUserData,
  LoginUserError,
  LoginUserResponse,
  LogoutUserData,
  LogoutUserError,
  LogoutUserResponse,
  ForgotPasswordData2,
  ForgotPasswordError,
  ForgotPasswordResponse,
  ResetPasswordData2,
  ResetPasswordError,
  ResetPasswordResponse,
  GetCurrentUserData,
  GetCurrentUserError,
  GetCurrentUserResponse,
  UpdateCurrentUserData,
  UpdateCurrentUserError,
  UpdateCurrentUserResponse,
  GetUserByUsernameData,
  GetUserByUsernameError,
  GetUserByUsernameResponse,
  DeleteProfileImageData,
  DeleteProfileImageError,
  DeleteProfileImageResponse,
  UploadProfileImageData,
  UploadProfileImageError,
  UploadProfileImageResponse,
  UpdateProfileImageData,
  UpdateProfileImageError,
  UpdateProfileImageResponse,
  FollowUserData,
  FollowUserError,
  FollowUserResponse,
  GetRecipesData,
  GetRecipesError,
  GetRecipesResponse,
  GetRecipeData,
  GetRecipeError,
  GetRecipeResponse,
  CreateRecipeData,
  CreateRecipeError,
  CreateRecipeResponse,
  DeleteRecipeData,
  DeleteRecipeError,
  DeleteRecipeResponse,
  SearchRecipesData,
  SearchRecipesError,
  SearchRecipesResponse,
  GetTrendingRecipesData,
  GetTrendingRecipesResponse,
  GetSimilarRecipesData,
  GetSimilarRecipesError,
  GetSimilarRecipesResponse,
  GetUserRecipesData,
  GetUserRecipesResponse,
  UnlikeRecipeData,
  UnlikeRecipeError,
  UnlikeRecipeResponse,
  LikeRecipeData,
  LikeRecipeError,
  LikeRecipeResponse,
  GetCommentsData,
  GetCommentsError,
  GetCommentsResponse,
  CreateCommentData,
  CreateCommentError,
  CreateCommentResponse,
  GetLikersData,
  GetLikersError,
  GetLikersResponse,
} from "./types.gen";

export const client = createClient(createConfig());

/**
 * Register User
 * Register a new user in the system.
 *
 * Args:
 * session: The database session dependency.
 * user_in: UserCreate model containing user details.
 *
 * Returns:
 * SuccessResponse indicating successful registration.
 *
 * Raises:
 * HTTPException: If user registration fails.
 */
export const registerUser = <ThrowOnError extends boolean = false>(
  options: Options<RegisterUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    RegisterUserResponse,
    RegisterUserError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    url: "/api/v1/register",
  });
};

/**
 * Login User
 * Authenticate a user and issue an access token.
 *
 * Args:
 * response: The response object to set cookies.
 * session: The database session dependency.
 * form: OAuth2PasswordRequestForm containing username and password.
 *
 * Returns:
 * SuccessResponse indicating successful login.
 *
 * Raises:
 * HTTPException: If authentication fails or if the user ID is missing.
 */
export const loginUser = <ThrowOnError extends boolean = false>(
  options: Options<LoginUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    LoginUserResponse,
    LoginUserError,
    ThrowOnError
  >({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options?.headers,
    },
    url: "/api/v1/login/access-token",
  });
};

/**
 * Logout User
 * Logout a user by clearing the access token cookie.
 */
export const logoutUser = <ThrowOnError extends boolean = false>(
  options?: Options<LogoutUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    LogoutUserResponse,
    LogoutUserError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/logout",
  });
};

/**
 * Forgot Password
 * Handle a forgot password request by generating and returning a reset token.
 */
export const forgotPassword = <ThrowOnError extends boolean = false>(
  options: Options<ForgotPasswordData2, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    ForgotPasswordResponse,
    ForgotPasswordError,
    ThrowOnError
  >({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options?.headers,
    },
    url: "/api/v1/forgot-password",
  });
};

/**
 * Reset Password
 * Reset the user's password using a valid reset token.
 */
export const resetPassword = <ThrowOnError extends boolean = false>(
  options: Options<ResetPasswordData2, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    ResetPasswordResponse,
    ResetPasswordError,
    ThrowOnError
  >({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options?.headers,
    },
    url: "/api/v1/reset-password",
  });
};

/**
 * Get Current User
 * Get the currently authenticated user's profile.
 *
 * Args:
 * current_user: The currently authenticated user
 *
 * Returns:
 * UserPublic: The user's public profile
 */
export const getCurrentUser = <ThrowOnError extends boolean = false>(
  options?: Options<GetCurrentUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetCurrentUserResponse,
    GetCurrentUserError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        fn: "accessToken",
        in: "header",
        name: "Authorization",
      },
    ],
    url: "/api/v1/users/me",
  });
};

/**
 * Update Current User
 * Update the current user's profile information.
 *
 * Args:
 * data: The user data to update
 * current_user: The currently authenticated user
 * session: Database session dependency
 *
 * Returns:
 * UserPublic: The updated user profile
 *
 * Raises:
 * HTTPException: If update fails
 */
export const updateCurrentUser = <ThrowOnError extends boolean = false>(
  options: Options<UpdateCurrentUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    UpdateCurrentUserResponse,
    UpdateCurrentUserError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        fn: "accessToken",
        in: "header",
        name: "Authorization",
      },
    ],
    url: "/api/v1/users/me",
  });
};

/**
 * Get User By Username
 * Get a user's public profile by their username.
 *
 * Args:
 * username: The username to look up
 * session: Database session dependency
 *
 * Returns:
 * UserPublic: The user's public profile
 *
 * Raises:
 * HTTPException: If user is not found
 */
export const getUserByUsername = <ThrowOnError extends boolean = false>(
  options: Options<GetUserByUsernameData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetUserByUsernameResponse,
    GetUserByUsernameError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/users/{username}",
  });
};

/**
 * Delete Profile Image
 * Delete the current user's profile image.
 *
 * Args:
 * current_user: The currently authenticated user
 * session: Database session dependency
 *
 * Returns:
 * SuccessResponse: Success message
 *
 * Raises:
 * HTTPException: If deletion fails
 */
export const deleteProfileImage = <ThrowOnError extends boolean = false>(
  options?: Options<DeleteProfileImageData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteProfileImageResponse,
    DeleteProfileImageError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        fn: "accessToken",
        in: "header",
        name: "Authorization",
      },
    ],
    url: "/api/v1/users/profile-image",
  });
};

/**
 * Upload Profile Image
 * Upload a new profile image for the current user.
 *
 * Args:
 * file: The image file to upload
 * current_user: The currently authenticated user
 * session: Database session dependency
 *
 * Returns:
 * SuccessResponseWithData: Response with the path to the uploaded image
 *
 * Raises:
 * HTTPException: If upload fails
 */
export const uploadProfileImage = <ThrowOnError extends boolean = false>(
  options: Options<UploadProfileImageData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    UploadProfileImageResponse,
    UploadProfileImageError,
    ThrowOnError
  >({
    ...options,
    ...formDataBodySerializer,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
    security: [
      {
        fn: "accessToken",
        in: "header",
        name: "Authorization",
      },
    ],
    url: "/api/v1/users/profile-image",
  });
};

/**
 * Update Profile Image
 * Update the current user's existing profile image.
 *
 * Args:
 * file: The new image file
 * current_user: The currently authenticated user
 * session: Database session dependency
 *
 * Returns:
 * SuccessResponseWithData: Response with the path to the updated image
 *
 * Raises:
 * HTTPException: If update fails
 */
export const updateProfileImage = <ThrowOnError extends boolean = false>(
  options: Options<UpdateProfileImageData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateProfileImageResponse,
    UpdateProfileImageError,
    ThrowOnError
  >({
    ...options,
    ...formDataBodySerializer,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
    security: [
      {
        fn: "accessToken",
        in: "header",
        name: "Authorization",
      },
    ],
    url: "/api/v1/users/profile-image",
  });
};

/**
 * Follow User
 * Follow a user
 */
export const followUser = <ThrowOnError extends boolean = false>(
  options: Options<FollowUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    FollowUserResponse,
    FollowUserError,
    ThrowOnError
  >({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options?.headers,
    },
    security: [
      {
        fn: "accessToken",
        in: "header",
        name: "Authorization",
      },
    ],
    url: "/api/v1/users/follow",
  });
};

/**
 * Get Recipes
 * Retrieve a list of recipes with their associated users.
 *
 * - **skip**: Number of records to skip for pagination
 * - **limit**: Maximum number of recipes to return
 */
export const getRecipes = <ThrowOnError extends boolean = false>(
  options?: Options<GetRecipesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetRecipesResponse,
    GetRecipesError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/recipe/",
  });
};

/**
 * Get Recipe
 * Retrieve a specific recipe by its ID.
 *
 * - **recipe_id**: Unique identifier of the recipe
 */
export const getRecipe = <ThrowOnError extends boolean = false>(
  options: Options<GetRecipeData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetRecipeResponse,
    GetRecipeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/recipe/p/{recipe_id}",
  });
};

/**
 * Create Recipe
 * Create a new recipe.
 *
 * - **recipe**: Recipe details in JSON format
 * - **image**: Recipe image file
 * - **current_user**: Authenticated user creating the recipe
 */
export const createRecipe = <ThrowOnError extends boolean = false>(
  options: Options<CreateRecipeData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateRecipeResponse,
    CreateRecipeError,
    ThrowOnError
  >({
    ...options,
    ...formDataBodySerializer,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
    security: [
      {
        fn: "accessToken",
        in: "header",
        name: "Authorization",
      },
    ],
    url: "/api/v1/recipe/create",
  });
};

/**
 * Delete Recipe
 * Delete a specific recipe.
 *
 * - **recipe_id**: Unique identifier of the recipe to delete
 * - **current_user**: Authenticated user deleting the recipe
 */
export const deleteRecipe = <ThrowOnError extends boolean = false>(
  options: Options<DeleteRecipeData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteRecipeResponse,
    DeleteRecipeError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        fn: "accessToken",
        in: "header",
        name: "Authorization",
      },
    ],
    url: "/api/v1/recipe/delete/{recipe_id}",
  });
};

/**
 * Search Recipes
 * Search recipes with optional filtering.
 *
 * - **query**: Search term (at least 3 characters)
 * - **cuisine**: Optional cuisine filter
 * - **max_cooking_time**: Optional maximum cooking time in minutes
 * - **tags**: Optional list of tags to filter by
 */
export const searchRecipes = <ThrowOnError extends boolean = false>(
  options: Options<SearchRecipesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    SearchRecipesResponse,
    SearchRecipesError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/recipe/search",
  });
};

/**
 * Get Trending Recipes
 * Retrieve trending recipes.
 */
export const getTrendingRecipes = <ThrowOnError extends boolean = false>(
  options?: Options<GetTrendingRecipesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetTrendingRecipesResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/recipe/trends",
  });
};

/**
 * Get Similar Recipes
 * Get similar recipes to a given recipe.
 *
 * - **recipe_id**: Base recipe to find similar recipes from
 * - **limit**: Maximum number of similar recipes to return
 */
export const getSimilarRecipes = <ThrowOnError extends boolean = false>(
  options: Options<GetSimilarRecipesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetSimilarRecipesResponse,
    GetSimilarRecipesError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/recipe/{recipe_id}/similar",
  });
};

/**
 * Get User Recipes
 * Retrieve recipes created by the current user.
 *
 * - **current_user**: Authenticated user
 */
export const getUserRecipes = <ThrowOnError extends boolean = false>(
  options?: Options<GetUserRecipesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetUserRecipesResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        fn: "accessToken",
        in: "header",
        name: "Authorization",
      },
    ],
    url: "/api/v1/recipe/me",
  });
};

/**
 * Unlike Recipe
 * Unlike a previously liked recipe.
 *
 * - **recipe_id**: Unique identifier of the recipe to unlike
 * - **user**: Authenticated user unliking the recipe
 */
export const unlikeRecipe = <ThrowOnError extends boolean = false>(
  options: Options<UnlikeRecipeData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    UnlikeRecipeResponse,
    UnlikeRecipeError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        fn: "accessToken",
        in: "header",
        name: "Authorization",
      },
    ],
    url: "/api/v1/recipe/{recipe_id}/like",
  });
};

/**
 * Like Recipe
 * Like a recipe.
 *
 * - **recipe_id**: Unique identifier of the recipe to like
 * - **user**: Authenticated user liking the recipe
 */
export const likeRecipe = <ThrowOnError extends boolean = false>(
  options: Options<LikeRecipeData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    LikeRecipeResponse,
    LikeRecipeError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        fn: "accessToken",
        in: "header",
        name: "Authorization",
      },
    ],
    url: "/api/v1/recipe/{recipe_id}/like",
  });
};

/**
 * Get Comments
 * Retrieve comments for a specific recipe.
 *
 * - **recipe_id**: Unique identifier of the recipe
 * - **skip**: Number of comments to skip for pagination
 * - **limit**: Maximum number of comments to return
 */
export const getComments = <ThrowOnError extends boolean = false>(
  options: Options<GetCommentsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetCommentsResponse,
    GetCommentsError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/recipe/{recipe_id}/comments",
  });
};

/**
 * Create Comment
 * Add a comment to a recipe.
 *
 * - **recipe_id**: Unique identifier of the recipe to comment on
 * - **comment**: Text of the comment (1-1000 characters)
 * - **user**: Authenticated user creating the comment
 */
export const createComment = <ThrowOnError extends boolean = false>(
  options: Options<CreateCommentData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateCommentResponse,
    CreateCommentError,
    ThrowOnError
  >({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options?.headers,
    },
    security: [
      {
        fn: "accessToken",
        in: "header",
        name: "Authorization",
      },
    ],
    url: "/api/v1/recipe/{recipe_id}/comments",
  });
};

/**
 * Get Likers
 * Fetch users who liked a specific recipe.
 *
 * - **recipe_id**: Unique identifier of the recipe
 */
export const getLikers = <ThrowOnError extends boolean = false>(
  options: Options<GetLikersData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetLikersResponse,
    GetLikersError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/recipe/{recipe_id}/likes",
  });
};
